<launch>
	<group ns="motoman_robot">
		<!-- specification of the motoman robot -->
		<rosparam param="basePosition">[0.0, 0.0, 0.0]</rosparam>
		<rosparam param="baseOrientation">[0.0, 0.0, 0.0, 1.0]</rosparam>
<!-- 		<rosparam param="leftArmHomeConfiguration">[2.827, 0.00, 2.67, 0.00, -1.571, -1.571, 0.00]</rosparam>
		<rosparam param="rightArmHomeConfiguration">[2.827, 0.00, 2.67, 0.00, -1.571, -1.571, 0.00]</rosparam> -->
<!-- 		<rosparam param="leftArmHomeConfiguration">[2.827, -1.257, 2.67, 0.000, -1.571, -1.571, 0.000]</rosparam>
		<rosparam param="rightArmHomeConfiguration">[2.827, -1.257, 2.67, 0.000, -1.571, -1.571, 0.000]</rosparam> -->
		<rosparam param="leftArmHomeConfiguration">[0.0, 0.0, 0.0, -0.2, 0.0, 0.0, 0.0]</rosparam>
		<rosparam param="rightArmHomeConfiguration">[0.0, 0.0, 0.0, -0.2, 0.0, 0.0, 0.0]</rosparam>
		<rosparam param="urdfFile">urdf/motoman.urdf</rosparam>
	</group>

	<group ns="workspace_table">
		<!-- specification of the workspace (table scene) -->
		<rosparam param="standingBase_dim">[0.915, 0.62, 0.19]</rosparam>
		<rosparam param="table_dim">[0.762, 1.215, 0.8]</rosparam>
		<!-- <rosparam param="table_dim">[0.58, 1.32, 0.58]</rosparam> -->
		<!-- the following parameter specifies how the far the inner periphery of table is from the robot rigid body in x direction -->
		<rosparam param="table_offset_x">0.55</rosparam>
		<!-- the following parameter specifies the height up to which the left arm transfer the object (either drop or trigger handoff) -->
		<rosparam param="transitCenterHeight">0.8</rosparam>
	</group>

	<group ns="simulated_camera">
		<!-- specification of the simulated camera -->
		<rosparam param="camera_extrinsic">[[-0.0182505, -0.724286, 0.689259, 0.329174],[-0.999453, 0.0322427, 0.00741728, -0.036492],[-0.0275958, -0.688746, -0.724478, 1.24839],[0.0, 0.0, 0.0, 1.0]]</rosparam>
		<!-- the following four camera intrinsic parameters: (1) fov (2) aspect (3) nearVal (4) farVal-->
		<rosparam param="camera_intrinsic">[90.0, 1.78, 0.1, 1.5]</rosparam>
	</group>

	<group ns="object_in_real_scene">
		<!-- specification of the object mesh in the real pybullet scene -->
		<rosparam param="object_mesh_path">mesh</rosparam>
		<rosparam param="dropHeight">0.15</rosparam>
	</group>

  <param name="robot_description" textfile="$(find pybullet_motoman)/urdf/motoman.urdf" />

	<!-- by default, we don't use real scene -->
	<arg name="sim" default="false" />


	<node pkg="pybullet_motoman" type="PybulletPlanScene.py" name="pybullet_plan_scene"
		output="screen" required="True" />




	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" output="screen" if="$(arg sim)" />
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" if="$(arg sim)" />

	<!-- the following node expected argument PybulletExecutionScene <scene_index(int) saveImage(bool) objectName(string)> -->
	<arg name="pybullet_execution_scene" default="3 n 003_cracker_box"/>
	<node pkg="pybullet_motoman" type="PybulletExecutionScene.py" name="pybullet_execution_scene"
		args="$(arg pybullet_execution_scene)" output="screen" required="True" if="$(arg sim)" />


	<node pkg="pybullet_motoman" type="TestPipeline.py" name="test_pipeline"
		output="screen" if="$(arg sim)" />


</launch>
